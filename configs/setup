#!/usr/bin/env zx
await $`uname`
let key = "";
const handleDecrypt = async (file, target, onlyWrite = false) => {
  const crypto = require("crypto")
  const file_content = await fs.readFile(file)
  if(!key.length) {
    key = await question("Decryption passphrase: ");
  }
  const keySize = 32;
  const salt = file_content.subarray(0, 16);
  const keyBuffer = crypto.pbkdf2Sync(key, salt, 10000, keySize, 'sha256');
  const iv = file_content.subarray(16, 32)
  const decipher = crypto.createDecipheriv('aes-256-cbc', keyBuffer, iv);
  let decrypted = decipher.update(file_content.subarray(32));
  decrypted = Buffer.concat([decrypted, decipher.final()]);
  if(onlyWrite) {
    await fs.writeFile(target, decrypted)
    return;
  }
  await fs.writeFile(file.replace(".crypt", ""), decrypted)
  await $`ln -s ${file.replace(".crypt", "")} ${target}`
  await $`chmod 600 ${file.replace(".crypt", "")}`
  await $`chmod 600 ${target}`
}
const checked = []
const probe = async target => {
  if(checked.includes(target))
    return
   console.log("probing", target)
   const exists = await fs.exists(target);
   if(exists) {
     const del = await question(target + " exists, delete? ");
     if(del !== "y") {
     process.exit(1);
     } else {
       const stat = await fs.stat(target);
       if(stat.isDirectory()) {
            await fs.rm(target, { recursive: true, force: true });
      } else {
          await fs.unlink(target)
      }
     }
  }
  checked.push(target);
}
const hp = os.homedir();
const dr = __dirname;
const top_dirs = await fs.readdir(__dirname);
const platform = process.platform;
if(platform === "win32") {
  await probe(path.join(hp, "AppData", "Local", "nvim"));
  await fs.copy(path.join(dr, "nvim", ".config"), path.join(hp, "AppData", "Local", "nvim"))
  const ssh_files = await fs.readdir(".ssh");
  const ssh_path = path.join(hp, ".ssh")
  await probe(ssh_path);
  await fs.mkdir(ssh_path);
  for(const f of ssh_files) {
    if(f.endsWith(".crypt"))
      await handleDecrypt(path.join(".ssh", f), path.join(ssh_path, f.replace(".crypt", "")), true)
    else
      await fs.copy(path.join(".ssh", f), path.join(ssh_path, f));

  }
  const ledit_path = path.join(hp, ".ledit")
  await probe(ledit_path);
  await fs.copy(path.join(dr, ".ledit"), ledit_path);
  const sublime_path = path.join(hp, "AppData", "Roaming", "Sublime Text", "Packages");
  await probe(path.join(sublime_path, "VintageLiz"));
  await probe(path.join(sublime_path, "User"));
  await fs.copy(path.join(dr, "sublime", ".config", "VintageLiz"), path.join(sublime_path, "VintageLiz"));
  await fs.copy(path.join(dr, "sublime", ".config", "User"), path.join(sublime_path, "User"));
} else {
  const SPECIAL = {
    sublime: async (dir, checkProbe = false) => {
      const sub_path = platform === "darwin" ? path.join(hp, "Library", "Application Support", "Sublime Text", "Packages") : path.join(hp, ".config", "sublime-text", "Packages");
      if(checkProbe) {
        await probe(path.join(sub_path, "User"));
        await probe(path.join(sub_path, "VintageLiz"));
        return;
      }
      await $`ln -s ${path.join(dr, "sublime", ".config", "User")} ${path.join(sub_path, "User")}`;
      await $`ln -s ${path.join(dr, "sublime", ".config", "VintageLiz")} ${path.join(sub_path, "VintageLiz")}`;
    }
  }
  const EXCLUDE = ["setup", "encrypt", ".", "..", ".DS_Store", "setup.mjs"];
  const BASE_DIRS = [".config", "Stuff"];
  for(const dir of top_dirs) {
    if(EXCLUDE.includes(dir))
      continue;
    if(! (await fs.exists(path.join(dr, dir))))
      continue;
    if(SPECIAL[dir]) {
      await SPECIAL[dir](path.join(dr, dir), true);
      continue;
    }
    if((await fs.stat(path.join(dr, dir))).isFile()) {
      if(dir.endsWith(".crypt")) {
        await probe(path.join(hp, dir.replace(".crypt", "")))
        await probe(path.join(dir.replace(".crypt", "")))
      } else {
        await probe(path.join(hp, dir))
      }
      continue;
    }
    const files = await fs.readdir(path.join(dr, dir));
    for(const f of files) {
      const stats = await fs.stat(path.join(dr, dir, f));
      if(stats.isDirectory() && BASE_DIRS.includes(f)) {
        const directory_target = path.join(hp, f);
        await probe(path.join(directory_target, dir))
      } else if (stats.isFile()) {
        const directory_target = path.join(hp, dir);
        await probe(directory_target)
        if(f.endsWith(".crypt")) {
          await probe(path.join(directory_target, f.replace(".crypt","")))
          await probe(path.join(dr, dir, f.replace(".crypt", "")))
        } else {
          await probe(path.join(directory_target, f))
        }
      }
    }

  }

  for(const dir of top_dirs) {
    if(EXCLUDE.includes(dir))
      continue;
    if(! (await fs.exists(path.join(dr, dir))))
      continue;
    if(SPECIAL[dir]) {
      await SPECIAL[dir](path.join(dr, dir));
      continue;
    }
    if((await fs.stat(path.join(__dirname, dir))).isFile()) {
      if(dir.endsWith(".crypt"))
        await handleDecrypt(path.join(__dirname, dir), path.join(os.homedir(), dir.replace(".crypt", "")))
      else
        await $`ln -s ${path.join(__dirname, dir)} ${path.join(os.homedir(), dir)}`
      continue;
    }
    const files = await fs.readdir(path.join(__dirname, dir));
    for(const f of files) {
      const stats = await fs.stat(path.join(__dirname, dir, f));
      if(stats.isDirectory() && BASE_DIRS.includes(f)) {
        const directory_target = path.join(os.homedir(), f);
        if(! (await fs.exists(directory_target)))
          await fs.mkdir(directory_target)
        await $`ln -s "${path.join(__dirname, dir, f)}" "${path.join(directory_target, dir)}"`
      } else if (stats.isFile()) {
        const directory_target = path.join(os.homedir(), dir);
        if(! (await fs.exists(directory_target)))
          await fs.mkdir(directory_target)
        if(f.endsWith(".crypt"))
          await handleDecrypt(path.join(__dirname, dir, f), path.join(os.homedir(), dir, f.replace(".crypt", "")))
        else
          await $`ln -s "${path.join(__dirname, dir, f)}" "${path.join(os.homedir(), dir, f)}"`
      }
    }

  }
}

